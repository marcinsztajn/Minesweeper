// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "MineSwepper.h"
#include <vector> 
#include <string> 
#include <algorithm> 
#include <sstream> 
#include <iterator> 
#include <iostream>
#include <cstring>
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

System::UnicodeString gameWonSound = "../../Sounds/bravo.wav";
System::UnicodeString tickSound = "../../Sounds/tick.wav";
System::UnicodeString gameLostSound = "../../Sounds/laughing.wav";
// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner) {
	board = new Board(rows, cols, amountOfBombs);

	Image1->Picture->Bitmap = board->bitmapa; // change Image's bitmap to generated by Board class
	Image2->Picture->Bitmap = board->bitmaps_ptr->sun;
	// Label1 indicates how many mines left in the game
	Label1->Caption = board->getAmountOfBombs();

	setWindowSize();
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::Image1MouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift, int X, int Y) {
	if (Button == mbLeft) {
		board->onLMBDown(X, Y);
		Image1->Picture->Bitmap = board->bitmapa; // weird that I have to reasign this pointer
    }
    else if (Button == mbRight) {
        board->rightMouseButtonHandler(X,Y,this->Marks1->Checked);
        Label1->Caption = board->getProtectedCellsCounter();
    }
}
// ---------------------------------------------------------------------------

void __fastcall TForm1::Image1MouseMove(TObject *Sender, TShiftState Shift, int X, int Y) {
	board->onMouseMove(X, Y);
    Image1->Picture->Bitmap = board->bitmapa; // weird that I have to reasign this pointer
}

// ---------------------------------------------------------------------------
void __fastcall TForm1::Image1MouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift, int X, int Y) {
	if (Button == mbLeft) {
		if (board->firstClick) {
            Timer1->Enabled = true;
			board->checkIfTimerEnabled();

		}
        board->onLMBUp(X, Y);
        // check if game is won
		int allAvaIndi = board->allAvailableIndices.size();
		int bombIndi = board->bombIndicies.size();
        bool check = board->checkIfVectorsContainSameIndicies(board->allAvailableIndices, board->bombIndicies);
		if (board->allAvailableIndices.size() == board->bombIndicies.size()) {   // game won
			board->drawAllFlagsAfterWin();
            Label1->Caption = board->getProtectedCellsCounter();
			// Game is Won
		board->stopTimer();
		Image2->Picture->Bitmap = board->bitmaps_ptr->sunSunglasses;
		playWinSound();
		// check if for current profile time is better than saved in .ini file
		switch (board->gameProfile) {
			case beginner:
			if (board->getGameTime() < Form4->gameScores->getBeginnerTime()) {
				Form6->ShowModal();
			}
			break;
			case intermediate:
			if (board->getGameTime() < Form4->gameScores->getIntermediateTime()) {
				Form6->ShowModal();
			}
			break;
			case expert:
			if (board->getGameTime() < Form4->gameScores->gatExpertTime()) {
				Form6->ShowModal();
			}
		default:
			;
			}
		// end switch
			}
		else if (board->checkIfGameIsLost()) {
			Image1->Picture->Bitmap = board->bitmapa;
			Image2->Picture->Bitmap = board->bitmaps_ptr->sunCry;
			playLostSound();
		}
	}
	Image1->Picture->Bitmap = board->bitmapa; // weird that I have to reasign this pointer
}
// ---------------------------------------------------------------------------
void __fastcall TForm1::Image2Click(TObject *Sender)
{
	// start new game
	board->newGame(rows,cols,amountOfBombs);
	Image1->Picture->Bitmap = board->bitmapa;
	Label1->Caption = board->getAmountOfBombs();
	Image2->Picture->Bitmap = board->bitmaps_ptr->sun;
	Label2->Caption = "0";
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
	if (board->checkIfTimerEnabled()){
	 //jezeli timer za³aczony z warswy nizszej to dodawaj licznik
		board->incrementTime();
		playTickSound();
	}
    Label2->Caption = board->getGameTime();
}
//---------------------------------------------------------------------------
void TForm1::setWindowSize(){
	// change the Panel width according to game board
	Panel1->Width = Image1->Width;
	// adjust the sun
	Image2->Top = Panel1->Height/2 - Image2->Height/2;
	Image2->Left = Panel1->Width/2 - Image2->Width/2;

}
void __fastcall TForm1::New1Click(TObject *Sender)
{
	this->Image2Click(this);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Beginner1Click(TObject *Sender)
{
	if (Beginner1->Checked == false) {
		Beginner1->Checked = true;
	}
    if (Intermediate1->Checked || Expert1->Checked || Custom1->Checked) {
		Intermediate1->Checked = false;
		Expert1->Checked = false;
		Custom1->Checked = false;
	}
	rows = 9;
	cols = 9;
	amountOfBombs = 10;
	this->Image2Click(this);
	Label2->Caption = "0";
	setWindowSize(); // always after new bitmap is loaded
	board->setGameProfile(beginner);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Intermediate1Click(TObject *Sender)
{
	if (Intermediate1->Checked == false) {
		Intermediate1->Checked = true;
	}
	if (Beginner1->Checked || Expert1->Checked || Custom1->Checked) {
		Beginner1->Checked = false;
		Expert1->Checked = false;
		Custom1->Checked = false;
	}

	rows = 16;
	cols = 16;
	amountOfBombs = 40;
	this->Image2Click(this);
	Label2->Caption = "0";
	setWindowSize(); // always after new bitmap is loaded
	board->setGameProfile(intermediate);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Expert1Click(TObject *Sender)
{
	if (Expert1->Checked == false) {
		Expert1->Checked = true;
	}
	if (Beginner1->Checked || Intermediate1->Checked || Custom1->Checked) {
		Beginner1->Checked = false;
		Intermediate1->Checked = false;
		Custom1->Checked = false;
	}

	rows = 16;
	cols = 30;
	amountOfBombs = 99;
	this->Image2Click(this);
	Label2->Caption = "0";
	setWindowSize(); // always after new bitmap is loaded
	board->setGameProfile(expert);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Custom1Click(TObject *Sender)
{
	if (Custom1->Checked == false) {
		Custom1->Checked = true;
	}
	if (Beginner1->Checked || Intermediate1->Checked || Expert1->Checked) {
		Beginner1->Checked = false;
		Intermediate1->Checked = false;
		Expert1->Checked = false;
   	}
    Form3->ShowModal();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Color1Click(TObject *Sender)
{
	if (Color1->Checked) {
		board->bitmapa->Monochrome = true;
	}
	else {
		board->bitmapa->Monochrome = false;
        Image1->Picture->Bitmap = board->bitmapa;
	}


}
//---------------------------------------------------------------------------

void TForm1::playWinSound(){
	if (Sound1->Checked) {
		MediaPlayer1->Close();
		MediaPlayer1->FileName = gameWonSound;
		MediaPlayer1->Open();
		MediaPlayer1->Play();
	}
}
void TForm1::playLostSound(){
    if (Sound1->Checked) {
		MediaPlayer1->Close();
		MediaPlayer1->FileName = gameLostSound;
		MediaPlayer1->Open();
		MediaPlayer1->Play();
	}
}
void TForm1::playTickSound(){
    if (Sound1->Checked) {
		MediaPlayer1->Close();
		MediaPlayer1->FileName = tickSound;
		MediaPlayer1->Open();
		MediaPlayer1->Play();

	}
}

void __fastcall TForm1::Besttimes1Click(TObject *Sender)
{
    Form4->ShowModal();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Exit1Click(TObject *Sender)
{
    this->Close();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Aboutmineswepper1Click(TObject *Sender)
{
    Form5->ShowModal();
}
//---------------------------------------------------------------------------

void __fastcall TForm1::FormCreate(TObject *Sender)
{
	board->setGameProfile(beginner);	
}
//---------------------------------------------------------------------------

